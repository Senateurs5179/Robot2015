// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5179.Robot2015;

import org.usfirst.frc5179.Robot2015.commands.*;
import org.usfirst.frc5179.Robot2015.subsystems.Lift;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton liftDownMaxButton;
    public JoystickButton liftDownButton;
    public JoystickButton liftUpButton;
    public JoystickButton forkLeftButton;
    public JoystickButton forkRightButton;
    public JoystickButton forkCloseButton;
    public JoystickButton forkOpenButton;
    public Joystick joystick0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick0 = new Joystick(0);
        
        forkOpenButton = new JoystickButton(joystick0, 7);
        forkOpenButton.whileHeld(new ForkOpen());
        forkCloseButton = new JoystickButton(joystick0, 6);
        forkCloseButton.whileHeld(new ForkClose());
        forkRightButton = new JoystickButton(joystick0, 5);
        forkRightButton.whileHeld(new ForkRight());
        forkLeftButton = new JoystickButton(joystick0, 4);
        forkLeftButton.whileHeld(new ForkLeft());
        liftUpButton = new JoystickButton(joystick0, 3);
        liftUpButton.whileHeld(new LiftUp());
        liftDownButton = new JoystickButton(joystick0, 2);
        liftDownButton.whileHeld(new LiftDown());
        liftDownMaxButton = new JoystickButton(joystick0, 1);
        liftDownMaxButton.whenPressed(new LiftDownMax());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("LiftDownMax", new LiftDownMax());

        SmartDashboard.putData("LiftDown", new LiftDown());

        SmartDashboard.putData("LiftUp", new LiftUp());

        SmartDashboard.putData("ForkLeft", new ForkLeft());

        SmartDashboard.putData("ForkRight", new ForkRight());

        SmartDashboard.putData("ForkClose", new ForkClose());

        SmartDashboard.putData("ForkOpen", new ForkOpen());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    	while (Lift.liftDownLimit.get() == false){ // While the limit switch isn't activated
    		Lift.victorSPLift.set(50);	
    	}        
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick0() {
        return joystick0;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

